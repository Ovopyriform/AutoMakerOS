<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<artifactId>openautomaker</artifactId>
	<version>4.03.00</version>
	<packaging>jar</packaging>

	<name>OpenAutoMaker</name>

	<parent>
		<artifactId>openautomaker-parent</artifactId>
		<groupId>xyz.openautomaker</groupId>
		<version>1.0</version>
		<relativePath>../openautomaker-parent</relativePath>
	</parent>

	<properties>
		<mainClass>xyz.openautomaker.Main</mainClass>
		<assets.common>${project.basedir}/packaging/assets-common</assets.common>
		<assets.os-specific>${project.basedir}/packaging/assets-os-specific/${os.detected.name}</assets.os-specific>
		<runtime.modules></runtime.modules>
		<windows.upgrade.uuid>ddfc953a-1dbc-44fd-b1db-346547702d3a</windows.upgrade.uuid>
		<windows.vendor>openautomaker.xyz</windows.vendor>
		<macos.sign></macos.sign>
		<macos.sign.identity></macos.sign.identity>
	</properties>

	<build>
		<resources>
			<resource>
				<directory>${project.basedir}/packaging/config</directory>
				<filtering>true</filtering>
				<targetPath>${project.build.directory}/packaging/</targetPath>
			</resource>
			<resource>
				<directory>${project.basedir}/src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
			<!--resource>
				<directory>${project.basedir}/src/main/resources/build-info/</directory>
				<filtering>true</filtering>
			</resource -->
		</resources>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-clean-plugin</artifactId>
				<configuration>
					<filesets>
						<fileset>
							<directory>.</directory>
							<includes>
								<include>dependency-reduced-pom.xml</include>
								<include>OpenAutoMaker-*.dmg</include>
							</includes>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<fork>true</fork>
					<compilerArgs>
						<arg>-XDignore.symbol.file</arg>
					</compilerArgs>
				</configuration>
			</plugin>
			<plugin>
				<groupId>
					org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<outputDirectory>${project.build.directory}/dependency</outputDirectory>
					<archive>
						<index>false</index>
						<manifest>
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib</classpathPrefix>
							<mainClass>${mainClass}</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<includeScope>compile</includeScope>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.openjfx</groupId>
				<artifactId>javafx-maven-plugin</artifactId>
				<version>0.0.8</version>
				<configuration>
					<mainClass>${mainClass}</mainClass>
					<options>
						<option>--add-exports</option>
						<option>javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED</option>
						<option>--add-exports</option>
						<option>javafx.controls/com.sun.javafx.scene.control.behavior=ALL-UNNAMED</option>
						<option>--add-exports</option>
						<option>javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED</option>
						<option>--add-exports</option>
						<option>javafx.graphics/com.sun.javafx.scene.text=ALL-UNNAMED</option>
						<option>--add-exports</option>
						<option>javafx.graphics/com.sun.javafx.geom=ALL-UNNAMED</option>
						<option>--add-exports</option>
						<option>java.base/sun.net.www.protocol.http=ALL-UNNAMED</option>
					</options>
				</configuration>
				<executions>
					<execution>
						<!-- Configuration for debugging -->
						<id>debug</id>
						<configuration>
							<mainClass>${mainClass}</mainClass>
							<options>
								<option>
									-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:8001</option>
								<option>
									--add-exports</option>
								<option>
									javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED</option>
								<option>
									--add-exports</option>
								<option>
									javafx.controls/com.sun.javafx.scene.control.behavior=ALL-UNNAMED</option>
								<option>
									--add-exports</option>
								<option>
									javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED</option>
								<option>
									--add-exports</option>
								<option>
									javafx.graphics/com.sun.javafx.scene.text=ALL-UNNAMED</option>
								<option>
									--add-exports</option>
								<option>
									javafx.graphics/com.sun.javafx.geom=ALL-UNNAMED</option>
								<option>
									--add-exports</option>
								<option>
									java.base/sun.net.www.protocol.http=ALL-UNNAMED</option>
							</options>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>${mainClass}</mainClass>
								</transformer>
							</transformers>
							<artifactSet>
								<includes>
									<include>org.openjfx:*</include>
								</includes>
							</artifactSet>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>io.github.wiverson</groupId>
				<artifactId>jtoolprovider-plugin</artifactId>
				<executions>
					<execution>
						<id>jpackage-app-image</id>
						<phase>package</phase>
						<goals>
							<goal>java-tool</goal>
						</goals>
						<configuration>
							<toolName>jpackage</toolName>
							<writeOutputToLog>true</writeOutputToLog>
							<writeErrorsToLog>true</writeErrorsToLog>
							<failOnError>true</failOnError>
							<removeDirectories>${project.build.directory}/installer-work</removeDirectories>
							<args>@${project.build.directory}/packaging/${os.detected.name}-app-image.args</args>
						</configuration>
					</execution>
					<execution>
						<id>jpackage-package</id>
						<phase>deploy</phase>
						<goals>
							<goal>java-tool</goal>
						</goals>
						<configuration>
							<toolName>jpackage</toolName>
							<writeOutputToLog>true</writeOutputToLog>
							<writeErrorsToLog>true</writeErrorsToLog>
							<failOnError>true</failOnError>
							<removeDirectories>${project.build.directory}/installer-work</removeDirectories>
							<args>@${project.build.directory}/packaging/${os.detected.name}-package.args</args>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<dependencies>
		<dependency>
			<groupId>
				org.junit.platform</groupId>
			<artifactId>junit-platform-launcher</artifactId>
			<scope>
				test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>
				junit-jupiter-engine</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.vintage</groupId>
			<artifactId>junit-vintage-engine</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>xyz.openautomaker</groupId>
			<artifactId>openautomaker-environment</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<dependency>
			<groupId>xyz.openautomaker</groupId>
			<artifactId>openautomaker-base</artifactId>
		</dependency>
		<dependency>
			<groupId>xyz.openautomaker</groupId>
			<artifactId>openautomaker-core</artifactId>
			<type>jar</type>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-controls</artifactId>
		</dependency>
		<dependency>
			<groupId>
				org.openjfx</groupId>
			<artifactId>javafx-fxml</artifactId>
		</dependency>
		<dependency>
			<groupId>org.controlsfx</groupId>
			<artifactId>controlsfx</artifactId>
		</dependency>
		<dependency>
			<groupId>de.jangassen</groupId>
			<artifactId>nsmenufx</artifactId>
			<version>3.1.0</version>
		</dependency>
	</dependencies>

	<profiles>
		<profile>
			<id>osx-specific</id>
			<activation>
				<os>
					<family>mac</family>
				</os>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>copy-runtime-files</id>
								<phase>install</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}/${project.name}.app/Contents/openautomaker</outputDirectory>
									<resources>
										<resource>
											<directory>${project.basedir}/packaging/assets-common/openautomaker</directory>
											<filtering>false</filtering>
										</resource>
										<resource>
											<directory>${project.basedir}/packaging/assets-os-specific/${os.detected.name}/openautomaker</directory>
											<filtering>false</filtering>
										</resource>
									</resources>
								</configuration>
							</execution>
							<execution>
								<id>copy-runtime-properties</id>
								<phase>install</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}/${project.name}.app/Contents</outputDirectory>
									<resources>
										<resource>
											<directory>${project.basedir}/packaging/assets-common</directory>
											<includes>
												<include>openautomaker.properties</include>
											</includes>
											<filtering>true</filtering>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>io.github.wiverson</groupId>
						<artifactId>jtoolprovider-plugin</artifactId>
						<executions>
							<execution>
								<id>jpackage-package</id>
								<phase>install</phase>
								<goals>
									<goal>java-tool</goal>
								</goals>
								<configuration>
									<toolName>jpackage</toolName>
									<writeOutputToLog>true</writeOutputToLog>
									<writeErrorsToLog>true</writeErrorsToLog>
									<failOnError>true</failOnError>
									<removeDirectories>${project.build.directory}/installer-work</removeDirectories>
									<args>@${project.build.directory}/packaging/${os.detected.name}-package.args</args>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>windows-specific</id>
			<activation>
				<os>
					<family>windows</family>
				</os>
			</activation>
		</profile>
		<profile>
			<id>linux-specific</id>
			<activation>
				<os>
					<family>unix</family>
					<name>Linux</name>
				</os>
			</activation>
		</profile>
		
	</profiles>

</project>
